name: Sync Upstream and Apply Modifications

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 2 * * *'  # 每天 UTC 02:00
  push:
    branches:
      - main
    paths:
      - '.github/workflows/mydiywode.yml'

permissions:
  contents: write

jobs:
  sync-and-modify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up upstream remote
        run: |
          git remote add upstream https://github.com/ysuolmai/OpenWRT-CI.git || true
          git remote -v

      - name: Fetch upstream changes
        run: |
          echo "Fetching from upstream..."
          git fetch upstream

      - name: Check for upstream updates
        id: check_updates
        run: |
          echo "检查上游仓库是否有新提交..."
          NEW_COMMITS=$(git rev-list HEAD..upstream/main 2>/dev/null || echo "")
          if [ -n "$NEW_COMMITS" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "✅ 发现上游新提交！准备同步..."
            echo ""
            echo "================================"
            echo "上游新提交列表："
            echo "================================"
            git log HEAD..upstream/main --oneline --max-count=20
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ 上游没有新提交。无需同步。"
          fi

      - name: Merge upstream changes
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          echo "合并上游更改..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git merge upstream/main --no-edit; then
            echo "✓ 成功合并上游更改"
          else
            echo "✗ 合并冲突，尝试使用 rebase"
            git merge --abort || true

            if git rebase upstream/main; then
              echo "✓ 成功 rebase 上游更改"
            else
              echo "✗ Rebase 失败，使用上游优先合并策略"
              git rebase --abort || true
              git merge upstream/main -X theirs --no-edit || true
              echo "⚠ 使用上游版本解决冲突"
            fi
          fi

      - name: Disable specific workflows
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          echo "================================"
          echo "禁用指定的工作流"
          echo "================================"
          workflows_to_disable=("sync-config.yml" "OWRT-ALL.yml")
          disabled_count=0

          for workflow in "${workflows_to_disable[@]}"; do
            workflow_path=".github/workflows/$workflow"
            if [ -f "$workflow_path" ]; then
              mv "$workflow_path" "${workflow_path}.disabled"
              echo "✓ 已禁用 $workflow"
              disabled_count=$((disabled_count+1))
            else
              echo "⚠ 未找到 $workflow"
            fi
          done

          echo ""
          echo "已禁用 $disabled_count 个工作流"
          echo "当前工作流文件："
          ls -la .github/workflows/ | grep -E '\.ya?ml' || true

      - name: Apply 4 modifications to Scripts/diy.sh (no heredoc)
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          # 使用 printf 逐行写入 modify.py，避免 heredoc 与 YAML 缩进冲突
          printf '%s\n' "import re" "import sys" "" \
          "try:" "    with open('Scripts/diy.sh', 'r', encoding='utf-8') as f:" "        content = f.read()" \
          "except FileNotFoundError:" "    print('错误: Scripts/diy.sh 文件不存在！')" "    sys.exit(1)" "" \
          "# 修改1：替换 keywords_to_delete 数组" \
          "old_pattern = r'(\"smartdns\" \"kucat\" \"bootstrap\")\\n\\)'" \
          "new_replacement = r'\\1 \"zn_m2\" \"redmi_ax5\" \"qihoo_360v6\" \"redmi_ax5-jdcloud\" \"link_nn6000-v2\" \"link_nn6000-v1\" \"cmiot_ax18\" \"anysafe_e1\"\\n)'" \
          "" \
          "if re.search(old_pattern, content):" "    content = re.sub(old_pattern, new_replacement, content)" "    print('✓ 修改1完成：更新 keywords_to_delete 数组')" \
          "else:" "    print('⚠ 修改1跳过：未找到目标文本或已修改')" "" \
          "# 修改2：添加新配置项（基于找到特定行）" \
          "additions = '\\t\"CONFIG_PACKAGE_git-http=y\"\\n\\t\"CONFIG_PACKAGE_curl=y\"\\n\\t\"CONFIG_PACKAGE_openssl-util=y\"\\n\\t\"CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y\"\\n\\t\"CONFIG_PACKAGE_kmod-usb-net-rndis=y\"'" \
          "config_pattern = r'(    \"CONFIG_PACKAGE_cifsmount=y\")\\n(\\))'" \
          "if re.search(config_pattern, content) and 'CONFIG_PACKAGE_git-http=y' not in content:" "    content = re.sub(config_pattern, r'\\1\\n' + additions + r'\\n\\2', content)" "    print('✓ 修改2完成：添加额外配置项')" \
          "else:" "    print('⚠ 修改2跳过：未找到目标或已存在')" "" \
          "# 修改3：添加 PPP/UPnP 修复脚本（作为字符串追加）" \
          "if \"Fix PPP / UPnP issues\" not in content:" "    fix_section = \"\"\"" \
          "#######################################" "# Fix PPP / UPnP issues" "#######################################" "mkdir -p package/base-files/files/etc/uci-defaults" "cat << 'EOF' > package/base-files/files/etc/uci-defaults/99-custom-fixes" "#!/bin/sh" "# 修复拨号问题" "sed -i '8c maxfail 1' /etc/ppp/options" "sed -i '192c sleep 30' /lib/netifd/proto/ppp.sh" "" "# 修复 upnp 问题" "sed -i '10c option external_ip \"59.111.160.244\"' /etc/config/upnpd" "" "exit 0" "EOF" "chmod +x package/base-files/files/etc/uci-defaults/99-custom-fixes\"\"\"" \
          "    content = content.rstrip() + '\\n' + fix_section + '\\n'" "    print('✓ 修改3完成：添加 PPP/UPnP 修复脚本')" \
          "else:" "    print('⚠ 修改3跳过：已存在')" "" \
          "# 修改4：将 dockerman 从 m 改为 y" \
          "changes_made = 0" "if '\"CONFIG_PACKAGE_luci-app-dockerman=m\"' in content:" "    content = content.replace('\"CONFIG_PACKAGE_luci-app-dockerman=m\"', '\"CONFIG_PACKAGE_luci-app-dockerman=y\"')" "    changes_made += 1" \
          "if '\"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=m\"' in content:" "    content = content.replace('\"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=m\"', '\"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y\"')" "    changes_made += 1" \
          "if changes_made > 0:" "    print(f'✓ 修改4完成：dockerman 改为内置 (y) - {changes_made} 处修改')" "else:" "    print('⚠ 修改4跳过：未找到或已修改')" "" \
          "# 写回文件" "with open('Scripts/diy.sh', 'w', encoding='utf-8') as f:" "    f.write(content)" "" "print('✅ 所有修改处理完成！')" > modify.py

          python3 modify.py
          rm -f modify.py

      - name: Verify modifications
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          echo "================================"
          echo "验证修改结果"
          echo "================================"
          verify_count=0
          total_count=4

          if grep -q '"zn_m2" "redmi_ax5" "qihoo_360v6"' Scripts/diy.sh; then
            echo "✓ 修改1验证通过"
            verify_count=$((verify_count+1))
          else
            echo "✗ 修改1验证失败"
          fi

          if grep -q 'CONFIG_PACKAGE_git-http=y' Scripts/diy.sh; then
            echo "✓ 修改2验证通过"
            verify_count=$((verify_count+1))
          else
            echo "✗ 修改2验证失败"
          fi

          if grep -q 'Fix PPP / UPnP issues' Scripts/diy.sh; then
            echo "✓ 修改3验证通过"
            verify_count=$((verify_count+1))
          else
            echo "✗ 修改3验证失败"
          fi

          if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' Scripts/diy.sh; then
            echo "✓ 修改4验证通过"
            verify_count=$((verify_count+1))
          else
            echo "✗ 修改4验证失败"
          fi

          echo ""
          echo "验证结果: $verify_count/$total_count 通过"
          if [ $verify_count -lt $total_count ]; then
            echo "⚠ 警告: 部分修改未通过验证"
          fi

      - name: Commit and push changes
        if: steps.check_updates.outputs.has_updates == 'true'
        id: push_changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A

          if git diff --cached --quiet; then
            echo "pushed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ 没有需要提交的更改"
          else
            git commit -m "chore: sync from upstream and apply modifications"
            if ! git pull origin main --rebase; then
              git rebase --abort || true
              git pull origin main --no-rebase || true
            fi
            git push origin main || true
            echo "pushed=true" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "================================"
          echo "📊 工作流执行摘要"
          echo "================================"
          if [ "${{ steps.check_updates.outputs.has_updates }}" == "true" ]; then
            echo "✅ 上游有更新"
            echo "✅ 已同步上游更改"
            echo "✅ 已应用自定义修改"
            if [ "${{ steps.push_changes.outputs.pushed }}" == "true" ]; then
              echo "✅ 已推送到远程仓库"
            elif [ "${{ steps.push_changes.outputs.pushed }}" == "false" ]; then
              echo "ℹ️ 没有需要推送的更改"
            else
              echo "⚠️ 推送状态未知"
            fi
          else
            echo "ℹ️ 上游无更新，未执行任何操作"
          fi

          echo ""
          echo "上游仓库: https://github.com/ysuolmai/OpenWRT-CI"
          echo "同步频率: 每天 UTC 02:00 (北京时间 10:00)"
          echo "================================"
