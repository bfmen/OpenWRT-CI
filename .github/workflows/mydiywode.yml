name: Sync Upstream and Apply Modifications

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 2 * * *'  # 每天 UTC 02:00
  push:
    branches:
      - main
    paths:
      - '.github/workflows/mydiywode.yml'

permissions:
  contents: write
  actions: write

jobs:
  sync-and-modify:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up upstream remote
        run: |
          git remote add upstream https://github.com/ysuolmai/OpenWRT-CI.git || true
          git remote -v

      - name: Fetch upstream changes
        run: |
          echo "Fetching from upstream..."
          git fetch upstream

      - name: Check for upstream updates
        id: check_updates
        run: |
          echo "检查上游仓库是否有新提交..."
          NEW_COMMITS=$(git rev-list HEAD..upstream/main 2>/dev/null || echo "")
          if [ -n "$NEW_COMMITS" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "发现上游新提交："
            git --no-pager log --oneline HEAD..upstream/main --max-count=30 || true
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "上游无新提交。"
          fi

      - name: Merge upstream changes
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          echo "合并上游更改..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git merge upstream/main --no-edit; then
            echo "✓ 成功合并上游更改"
          else
            echo "✗ 合并冲突，尝试 rebase"
            git merge --abort || true
            if git rebase upstream/main; then
              echo "✓ 成功 rebase 上游更改"
            else
              echo "✗ rebase 失败，使用上游优先合并策略"
              git rebase --abort || true
              git merge upstream/main -X theirs --no-edit || true
              echo "⚠ 使用上游版本解决冲突"
            fi
          fi

      - name: Disable OWRT-ALL workflow (API, fallback to rename)
        if: steps.check_updates.outputs.has_updates == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # 精确使用指定文件名 OWRT-ALL.yml，若需要其它变体可在此添加
          WF_CANDIDATES=("OWRT-ALL.yml")
          TOKEN="${PAT_TOKEN:-$GITHUB_TOKEN}"
          disabled_any=false

          for wf in "${WF_CANDIDATES[@]}"; do
            echo "尝试通过 API 禁用工作流：$wf"
            if [ -n "$TOKEN" ]; then
              http_code=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
                -H "Authorization: token $TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${REPO}/actions/workflows/${wf}/disable" || echo "000")
              if [ "$http_code" = "204" ]; then
                echo "✓ 已通过 API 禁用: $wf"
                disabled_any=true
                break
              else
                echo "⚠ API 禁用返回 HTTP $http_code （$wf）"
              fi
            else
              echo "⚠ 未提供 token（PAT_TOKEN/GITHUB_TOKEN），跳过 API 调用"
            fi
          done

          if [ "$disabled_any" = "false" ]; then
            echo "API 禁用未成功，尝试通过重命名工作流文件来禁用（需要 commit/push 生效）"
            for wf in "${WF_CANDIDATES[@]}"; do
              path=".github/workflows/${wf}"
              if [ -f "$path" ]; then
                mv "$path" "${path}.disabled"
                echo "✓ 已重命名并禁用: $path -> ${path}.disabled"
                disabled_any=true
              fi
            done
            if [ "$disabled_any" = "false" ]; then
              echo "ℹ️ 未找到 OWRT-ALL 工作流文件（候选名未命中）"
            fi
          fi

          echo ""
          echo "当前 .github/workflows 目录预览："
          ls -la .github/workflows/ || true

      - name: Apply modifications to Scripts/diy.sh
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          TARGET="Scripts/diy.sh"
          if [ ! -f "$TARGET" ]; then
            echo "警告: $TARGET 不存在，跳过修改步骤"
            exit 0
          fi

          echo "备份原文件为 ${TARGET}.bak"
          cp -a "$TARGET" "${TARGET}.bak" || true

          # 修改1：替换 keywords_to_delete 数组（追加新项）
          perl -0777 -pe 's/("smartdns" "kucat" "bootstrap")\n\)/$1 "zn_m2" "redmi_ax5" "qihoo_360v6" "redmi_ax5-jdcloud" "link_nn6000-v2" "link_nn6000-v1" "cmiot_ax18" "anysafe_e1"\n\)/s' -i "$TARGET" || true

          # 修改2：在找到 CONFIG_PACKAGE_cifsmount=y 的地方插入额外配置（若尚未存在）
          if ! grep -q 'CONFIG_PACKAGE_git-http=y' "$TARGET"; then
            perl -0777 -pe 's/( {4}"CONFIG_PACKAGE_cifsmount=y")\n(\))/ $1 . "\n\t\"CONFIG_PACKAGE_git-http=y\"\n\t\"CONFIG_PACKAGE_curl=y\"\n\t\"CONFIG_PACKAGE_openssl-util=y\"\n\t\"CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y\"\n\t\"CONFIG_PACKAGE_kmod-usb-net-rndis=y\"\n" . $2 /es' -i "$TARGET" || true
          fi

          # 修改4：将 dockerman 从 m 改为 y（替换所有匹配项）
          perl -pi -e 's/"CONFIG_PACKAGE_luci-app-dockerman=m"/"CONFIG_PACKAGE_luci-app-dockerman=y"/g; s/"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=m"/"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y"/g' "$TARGET" || true

          # 修改3：追加 PPP / UPnP 修复脚本片段（如果不存在）
          if ! grep -q 'Fix PPP / UPnP issues' "$TARGET"; then
            {
              echo "#######################################"
              echo "# Fix PPP / UPnP issues"
              echo "#######################################"
              echo "mkdir -p package/base-files/files/etc/uci-defaults"
              echo "cat << 'EOF' > package/base-files/files/etc/uci-defaults/99-custom-fixes"
              echo "#!/bin/sh"
              echo "# 修复拨号问题"
              echo "sed -i '8c maxfail 1' /etc/ppp/options"
              echo "sed -i '192c sleep 30' /lib/netifd/proto/ppp.sh"
              echo ""
              echo "# 修复 upnp 问题"
              echo "sed -i '10c option external_ip \"59.111.160.244\"' /etc/config/upnpd"
              echo ""
              echo "exit 0"
              echo "EOF"
              echo "chmod +x package/base-files/files/etc/uci-defaults/99-custom-fixes"
            } >> "$TARGET"
          else
            echo "检测到 PPP/UPnP 修复片段已存在，跳过追加"
          fi

          echo "修改完成，显示文件末尾预览："
          tail -n 60 "$TARGET" || true

      - name: Verify modifications
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          TARGET="Scripts/diy.sh"
          ok=0
          if grep -q '"zn_m2" "redmi_ax5" "qihoo_360v6"' "$TARGET"; then echo "✓ 修改1 OK"; ok=$((ok+1)); else echo "✗ 修改1 FAIL"; fi
          if grep -q 'CONFIG_PACKAGE_git-http=y' "$TARGET"; then echo "✓ 修改2 OK"; ok=$((ok+1)); else echo "✗ 修改2 FAIL"; fi
          if grep -q 'Fix PPP / UPnP issues' "$TARGET"; then echo "✓ 修改3 OK"; ok=$((ok+1)); else echo "✗ 修改3 FAIL"; fi
          if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' "$TARGET"; then echo "✓ 修改4 OK"; ok=$((ok+1)); else echo "✗ 修改4 FAIL"; fi
          echo "验证通过 $ok/4"

      - name: Commit and push changes
        if: steps.check_updates.outputs.has_updates == 'true'
        id: push_changes
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "pushed=false" >> $GITHUB_OUTPUT
            echo "无需要提交的更改"
          else
            git commit -m "chore: sync from upstream and apply modifications

- Synced from: https://github.com/ysuolmai/OpenWRT-CI
- Applied modifications to Scripts/diy.sh
- Disabled OWRT-ALL workflow via API/rename if applicable

Automated by GitHub Actions"
            if ! git pull origin main --rebase; then
              git rebase --abort || true
              git pull origin main --no-rebase || true
            fi
            git push origin main || true
            echo "pushed=true" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        if: always()
        run: |
          echo "================================"
          echo "工作流执行摘要"
          echo "================================"
          if [ "${{ steps.check_updates.outputs.has_updates }}" = "true" ]; then
            echo "✅ 已检测到并处理上游更新（如有）"
            if [ "${{ steps.push_changes.outputs.pushed }}" = "true" ]; then
              echo "✅ 更改已推送到远程仓库"
            else
              echo "ℹ️ 更改未推送或无更改需要推送"
            fi
          else
            echo "ℹ️ 上游无更新，未做任何改动"
          fi
          echo ""
          echo "已尝试禁用：OWRT-ALL（仅此文件名）"
          echo "================================"
