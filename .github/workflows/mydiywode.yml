name: Sync Upstream and Apply Modifications

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 2 * * *'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/mydiywode.yml'

permissions:
  contents: write
  actions: write

jobs:
  sync-and-modify:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up upstream remote
        run: |
          git remote add upstream https://github.com/ysuolmai/OpenWRT-CI.git 2>/dev/null || true
          git remote -v

      - name: Fetch upstream changes
        run: |
          echo "从上游仓库拉取最新提交..."
          git fetch upstream --prune

      - name: Check for upstream updates
        id: check_updates
        run: |
          NEW_COMMITS=$(git rev-list HEAD..upstream/main 2>/dev/null || echo "")
          if [ -n "$NEW_COMMITS" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "::notice::发现上游新提交"
            git --no-pager log --oneline HEAD..upstream/main --max-count=30 || true
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "::notice::上游没有新提交"
          fi

      - name: Merge upstream changes
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git merge upstream/main --no-edit; then
            echo "成功合并上游提交"
          else
            echo "合并冲突 — 尝试 rebase"
            git merge --abort || true
            if git rebase upstream/main; then
              echo "成功 rebase 上游提交"
            else
              echo "Rebase 失败 — 使用上游版本作为优先"
              git rebase --abort || true
              git merge upstream/main -X theirs --no-edit || true
            fi
          fi

      - name: Disable OWRT-ALL workflow (API then rename)
        if: steps.check_updates.outputs.has_updates == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          WF="OWRT-ALL"  # 去掉 .yml 后缀
          TOKEN="${PAT_TOKEN:-$GITHUB_TOKEN}"
          API_DISABLED=false
          if [ -n "$TOKEN" ]; then
            http_code=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
              -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPO}/actions/workflows/${WF}/disable" || echo "000")
            if [ "$http_code" = "204" ]; then
              echo "✅ 成功通过 API 禁用工作流: $WF"
              API_DISABLED=true
            else
              echo "⚠ API 禁用返回 HTTP $http_code，尝试 fallback"
            fi
          else
            echo "⚠ 无可用 token，跳过 API 禁用"
          fi

          if [ "$API_DISABLED" = "false" ]; then
            path=".github/workflows/${WF}.yml"
            if [ -f "$path" ]; then
              mv "$path" "${path}.disabled"
              echo "✅ 通过重命名方式禁用工作流: ${path} -> ${path}.disabled"
            else
              echo "⚠ 未找到工作流文件: ${path}"
            fi
          fi

          echo "当前 workflows 文件列表："
          ls -la .github/workflows/ || true

      - name: Apply modifications to Scripts/diy.sh
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          TARGET="Scripts/diy.sh"
          if [ ! -f "$TARGET" ]; then
            echo "⚠ 目标文件 $TARGET 不存在 — 跳过修改"
            exit 0
          fi

          cp -a "$TARGET" "${TARGET}.bak" || true

          # 1) Append/replace keywords block if matched
          perl -0777 -pe 's/("smartdns" "kucat" "bootstrap")\n\)/$1 "zn_m2" "redmi_ax5" "qihoo_360v6" "redmi_ax5-jdcloud" "link_nn6000-v2" "link_nn6000-v1" "cmiot_ax18" "anysafe_e1"\n\)/s' -i "$TARGET" || true

          # 2) Insert extra CONFIG entries near CONFIG_PACKAGE_cifsmount=y if not present
          if ! grep -q 'CONFIG_PACKAGE_git-http=y' "$TARGET"; then
            perl -0777 -pe 's/( {4}"CONFIG_PACKAGE_cifsmount=y")\n(\))/ $1 . "\n\t\"CONFIG_PACKAGE_git-http=y\"\n\t\"CONFIG_PACKAGE_curl=y\"\n\t\"CONFIG_PACKAGE_openssl-util=y\"\n\t\"CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y\"\n\t\"CONFIG_PACKAGE_kmod-usb-net-rndis=y\"\n" . $2 /es' -i "$TARGET" || true
          fi

          # 4) Change dockerman from m to y
          perl -pi -e 's/"CONFIG_PACKAGE_luci-app-dockerman=m"/"CONFIG_PACKAGE_luci-app-dockerman=y"/g; s/"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=m"/"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y"/g' "$TARGET" || true

          # 3) Append PPP/UPnP fix script snippet if not present
          if ! grep -q 'Fix PPP / UPnP issues' "$TARGET"; then
            {
              echo "#######################################"
              echo "# 修复 PPP / UPnP 问题"
              echo "#######################################"
              echo "mkdir -p package/base-files/files/etc/uci-defaults"
              echo "cat << 'EOF' > package/base-files/files/etc/uci-defaults/99-custom-fixes"
              echo "#!/bin/sh"
              echo "sed -i '8c maxfail 1' /etc/ppp/options"
              echo "sed -i '192c sleep 30' /lib/netifd/proto/ppp.sh"
              echo "sed -i '10c option external_ip \"59.111.160.244\"' /etc/config/upnpd"
              echo "exit 0"
              echo "EOF"
              echo "chmod +x package/base-files/files/etc/uci-defaults/99-custom-fixes"
            } >> "$TARGET"
          fi

          echo "预览修改文件尾部 (tail 60):"
          tail -n 60 "$TARGET" || true

      - name: Verify modifications
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          T="Scripts/diy.sh"
          OK=0
          if grep -q '"zn_m2" "redmi_ax5" "qihoo_360v6"' "$T"; then echo "修改1成功"; OK=$((OK+1)); else echo "修改1失败"; fi
          if grep -q 'CONFIG_PACKAGE_git-http=y' "$T"; then echo "修改2成功"; OK=$((OK+1)); else echo "修改2失败"; fi
          if grep -q 'Fix PPP / UPnP issues' "$T"; then echo "修改3成功"; OK=$((OK+1)); else echo "修改3失败"; fi
          if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' "$T"; then echo "修改4成功"; OK=$((OK+1)); else echo "修改4失败"; fi
          echo "修改通过 $OK/4"

      - name: Commit and push changes
        if: steps.check_updates.outputs.has_updates == 'true'
        id: push_changes
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "pushed=false" >> $GITHUB_OUTPUT
            echo "没有需要提交的更改"
          else
            git commit -m "chore: sync from upstream and apply modifications"
            if ! git pull origin main --rebase; then
              git rebase --abort || true
              git pull origin main --no-rebase || true
            fi
            git push origin main || true
            echo "pushed=true" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        if: always()
        run: |
          echo "===== 执行摘要 ====="
          if [ "${{ steps.check_updates.outputs.has_updates }}" = "true" ]; then
            echo "已处理上游更新。"
            if [ "${{ steps.push_changes.outputs.pushed }}" = "true" ]; then
              echo "更改已推送到远程仓库。"
            else
              echo "无推送操作或无需推送。"
            fi
          else
            echo "上游无更新。"
          fi
          echo "已禁用目标工作流: OWRT-ALL (优先 API，失败则重命名)."
