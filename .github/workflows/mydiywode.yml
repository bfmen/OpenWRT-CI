name: Sync Upstream and Apply Modifications

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点（UTC时间）自动执行
  push:
    branches:
      - main
    paths:
      - '.github/workflows/mydiy.yml' # 注意：文件名应与你自己的文件名一致

permissions:
  contents: write

jobs:
  sync-and-modify:
    runs-on: ubuntu-latest
    
    steps:
    # 步骤 1: 使用 PAT 检出仓库，以获得足够的权限
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN }}

    - name: Set up upstream remote
      run: |
        git remote add upstream https://github.com/ysuolmai/OpenWRT-CI.git || true
        git remote -v

    - name: Fetch upstream changes
      run: |
        echo "Fetching from upstream..."
        git fetch upstream
        
    # 步骤 2: 使用更精确的方式检查上游更新
    - name: Check for upstream updates
      id: check_updates
      run: |
        echo "检查上游仓库是否有新提交..."
        
        # 精确比较：列出上游有而本地没有的提交
        # 如果这个命令有任何输出，说明上游有真正的更新
        NEW_COMMITS=$(git rev-list HEAD..upstream/main)
        
        if [ -n "$NEW_COMMITS" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "✅ 发现上游新提交！准备同步..."
          
          # 显示上游的新提交
          echo ""
          echo "================================"
          echo "上游新提交列表："
          echo "================================"
          git log HEAD..upstream/main --oneline --max-count=20
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "✅ 上游没有新提交。您本地的修改不会触发不必要的同步。"
        fi

    - name: Merge upstream changes
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        echo "合并上游更改..."
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 优先尝试合并，保留本地更改
        if git merge upstream/main --no-edit; then
          echo "✓ 成功合并上游更改"
        else
          echo "✗ 合并冲突，尝试使用 rebase"
          git merge --abort
          
          # 其次尝试 rebase，也尽力保留本地更改
          if git rebase upstream/main; then
            echo "✓ 成功 rebase 上游更改"
          else
            echo "✗ Rebase 失败，使用强制策略"
            git rebase --abort
            
            # 最后使用 theirs 策略，以上游为准解决冲突
            git merge upstream/main -X theirs --no-edit
            echo "⚠ 使用上游版本解决冲突"
          fi
        fi

    - name: Disable specific workflows
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        echo "================================"
        echo "禁用指定的工作流"
        echo "================================"
        
        if [ -f ".github/workflows/sync-config.yml" ]; then
          mv .github/workflows/sync-config.yml .github/workflows/sync-config.yml.disabled
          echo "已禁用 sync-config.yml"
        fi
        
        if [ -f ".github/workflows/OWRT-ALL.yml" ]; then
          mv .github/workflows/OWRT-ALL.yml .github/workflows/OWRT-ALL.yml.disabled
          echo "已禁用 OWRT-ALL.yml"
        fi
        
        echo ""
        echo "当前工作流文件："
        ls -la .github/workflows/

    - name: Apply 4 modifications to Scripts/diy.sh
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        cat > modify.py << 'ENDPY'
        import re
        
        with open('Scripts/diy.sh', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 修改1：替换 keywords_to_delete 数组
        content = re.sub(
            r'("smartdns" "kucat" "bootstrap")\n\)',
            r'\1 "zn_m2" "redmi_ax5" "qihoo_360v6" "redmi_ax5-jdcloud" "link_nn6000-v2" "link_nn6000-v1" "cmiot_ax18" "anysafe_e1"\n)',
            content
        )
        print("修改1完成：更新 keywords_to_delete 数组")
        
        # 修改2：添加新配置
        additions = '\t"CONFIG_PACKAGE_git-http=y"\n\t"CONFIG_PACKAGE_curl=y"\n\t"CONFIG_PACKAGE_openssl-util=y"\n\t"CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y"\n\t"CONFIG_PACKAGE_kmod-usb-net-rndis=y"'
        content = re.sub(
            r'(    "CONFIG_PACKAGE_cifsmount=y")\n(\))',
            r'\1\n' + additions + r'\n\2',
            content
        )
        print("修改2完成：添加额外配置项")
        
        # 修改3：添加 PPP/UPnP 修复脚本
        fix_section = """
        #######################################
        # Fix PPP / UPnP issues
        #######################################
        mkdir -p package/base-files/files/etc/uci-defaults
        cat << 'EOF' > package/base-files/files/etc/uci-defaults/99-custom-fixes
        #!/bin/sh
        # 修复拨号问题
        sed -i '8c maxfail 1' /etc/ppp/options
        sed -i '192c sleep 30' /lib/netifd/proto/ppp.sh
        
        # 修复 upnp 问题
        sed -i '10c option external_ip "59.111.160.244"' /etc/config/upnpd
        
        exit 0
        EOF
        chmod +x package/base-files/files/etc/uci-defaults/99-custom-fixes"""
        
        if "Fix PPP / UPnP issues" not in content:
            content = content.rstrip() + '\n' + fix_section + '\n'
            print("修改3完成：添加 PPP/UPnP 修复脚本")
        else:
            print("修改3已存在，跳过")
        
        # 修改4：将 dockerman 从 m 改为 y
        content = content.replace(
            '"CONFIG_PACKAGE_luci-app-dockerman=m"',
            '"CONFIG_PACKAGE_luci-app-dockerman=y"'
        )
        content = content.replace(
            '"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=m"',
            '"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y"'
        )
        print("修改4完成：dockerman 改为内置(y)")
        
        with open('Scripts/diy.sh', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("\n所有修改完成！")
        ENDPY
        
        python3 modify.py
        rm -f modify.py

    - name: Verify modifications
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        echo "================================"
        echo "验证修改结果"
        echo "================================"
        if grep -q '"zn_m2" "redmi_ax5" "qihoo_360v6"' Scripts/diy.sh; then echo "✓ 修改1验证通过"; else echo "✗ 修改1验证失败"; fi
        if grep -q 'CONFIG_PACKAGE_git-http=y' Scripts/diy.sh; then echo "✓ 修改2验证通过"; else echo "✗ 修改2验证失败"; fi
        if grep -q 'Fix PPP / UPnP issues' Scripts/diy.sh; then echo "✓ 修改3验证通过"; else echo "✗ 修改3验证失败"; fi
        if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' Scripts/diy.sh; then echo "✓ 修改4验证通过"; else echo "✗ 修改4验证失败"; fi

    # 步骤 3: 提交并推送，包含 pull --rebase 防止冲突
    - name: Commit and push changes
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add -A
        
        if git diff --cached --quiet; then
          echo "没有需要提交的更改。"
        else
          git commit -m "Chore: Sync from upstream and apply modifications

          - Synced from: https://github.com/ysuolmai/OpenWRT-CI
          - Applied custom modifications to diy.sh
          - Disabled sync-config and OWRT-ALL workflows
          - Automated by GitHub Actions"
          
          # 推送前先拉取远程更新，防止 non-fast-forward 错误
          git pull origin main --rebase
          
          git push origin main
        fi

    - name: Summary
      if: always()
      run: |
        echo ""
        echo "================================"
        echo "工作流执行摘要"
        echo "================================"
        if [ "${{ job.status }}" == "success" ]; then
          if [ "${{ steps.check_updates.outputs.has_updates }}" == "true" ]; then
            echo "✅ 成功：已同步上游更新，应用修改并推送到 main 分支。"
          else
            echo "✅ 成功：上游无更新，未执行任何操作。"
          fi
        else
            echo "❌ 失败：工作流执行过程中遇到错误。"
        fi
        echo "================================"
