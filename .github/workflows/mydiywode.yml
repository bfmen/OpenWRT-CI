name: Sync Upstream and Apply Modifications

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 2 * * *'  # 每天 UTC 02:00
  push:
    branches:
      - main
    paths:
      - '.github/workflows/mydiywode.yml'

permissions:
  contents: write
  actions: write

jobs:
  sync-and-modify:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      # GITHUB_TOKEN 可在需要时回退使用：${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up upstream remote
        run: |
          git remote add upstream https://github.com/ysuolmai/OpenWRT-CI.git || true
          git remote -v

      - name: Fetch upstream changes
        run: |
          echo "Fetching from upstream..."
          git fetch upstream

      - name: Check for upstream updates
        id: check_updates
        run: |
          echo "检查上游仓库是否有新提交..."
          NEW_COMMITS=$(git rev-list HEAD..upstream/main 2>/dev/null || echo "")
          if [ -n "$NEW_COMMITS" ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "✅ 发现上游新提交："
            git log HEAD..upstream/main --oneline --max-count=30
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ 上游无新提交。"
          fi

      - name: Merge upstream changes
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          echo "合并上游更改..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git merge upstream/main --no-edit; then
            echo "✓ 成功合并上游更改"
          else
            echo "✗ 合并冲突，尝试 rebase"
            git merge --abort || true
            if git rebase upstream/main; then
              echo "✓ 成功 rebase 上游更改"
            else
              echo "✗ rebase 失败，使用上游优先合并策略"
              git rebase --abort || true
              git merge upstream/main -X theirs --no-edit || true
              echo "⚠ 使用上游版本解决冲突"
            fi
          fi

      - name: Disable specific workflows (API preferred, fallback rename)
        if: steps.check_updates.outputs.has_updates == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # 要禁用的工作流文件名（按需增减）
          candidates=("sync-config.yml" "sync-config.yaml" "Sync Config Files.yml" "OWRT-ALL.yml" "OWRT-ALL.yaml")

          disabled=()
          for wf in "${candidates[@]}"; do
            echo "尝试通过 API 禁用工作流：$wf"
            # 使用 PAT_TOKEN 优先，否则用 GITHUB_TOKEN
            TOKEN="${PAT_TOKEN:-$GITHUB_TOKEN}"
            if [ -z "$TOKEN" ]; then
              echo "⚠ 未找到 token，跳过 API 调用"
              API_OK=false
            else
              http_code=$(curl -s -o /dev/null -w "%{http_code}" \
                -X PUT \
                -H "Authorization: token $TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${REPO}/actions/workflows/${wf}/disable" || echo "000")
              if [ "$http_code" = "204" ]; then
                echo "✓ 已通过 API 禁用: $wf"
                disabled+=("$wf (api)")
                continue
              else
                echo "⚠ API 禁用返回 HTTP $http_code"
              fi
            fi

            # 回退：通过重命名文件禁用（需要 commit/push 才生效）
            workflow_path=".github/workflows/${wf}"
            if [ -f "$workflow_path" ]; then
              mv "$workflow_path" "${workflow_path}.disabled"
              echo "✓ 已通过重命名禁用: $workflow_path -> ${workflow_path}.disabled"
              disabled+=("$wf (renamed)")
            else
              echo "ℹ️ 未找到文件: $workflow_path"
            fi
          done

          echo ""
          echo "已尝试禁用的工作流（带禁用方式标注）:"
          printf '%s\n' "${disabled[@]:-（无）}"
          echo ""
          echo "当前 .github/workflows 列表："
          ls -la .github/workflows/ | sed -n '1,200p' || true

      - name: Apply 4 modifications to Scripts/diy.sh
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          TARGET="Scripts/diy.sh"
          if [ ! -f "$TARGET" ]; then
            echo "错误：$TARGET 不存在，跳过修改"
            exit 0
          fi

          echo "备份原文件为 ${TARGET}.bak"
          cp -a "$TARGET" "${TARGET}.bak"

          # ---- 修改1：替换 keywords_to_delete 数组，追加新项 ----
          perl -0777 -pe '
            s/("smartdns" "kucat" "bootstrap")\n\)/$1 "zn_m2" "redmi_ax5" "qihoo_360v6" "redmi_ax5-jdcloud" "link_nn6000-v2" "link_nn6000-v1" "cmiot_ax18" "anysafe_e1"\n\)/s
          ' -i "$TARGET" || true

          # ---- 修改2：在找到 CONFIG_PACKAGE_cifsmount=y 的地方插入额外配置（若尚未存在） ----
          perl -0777 -pe '
            if (index($_, "CONFIG_PACKAGE_git-http=y") == -1) {
              s/(    "CONFIG_PACKAGE_cifsmount=y")\n(\))/ $1 . "\n\t\"CONFIG_PACKAGE_git-http=y\"\n\t\"CONFIG_PACKAGE_curl=y\"\n\t\"CONFIG_PACKAGE_openssl-util=y\"\n\t\"CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y\"\n\t\"CONFIG_PACKAGE_kmod-usb-net-rndis=y\"\n" . $2 /es;
            }
          ' -i "$TARGET" || true

          # ---- 修改4（先执行）：将 dockerman 从 m 改为 y ----
          perl -pi -e '
            s/"CONFIG_PACKAGE_luci-app-dockerman=m"/"CONFIG_PACKAGE_luci-app-dockerman=y"/g;
            s/"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=m"/"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y"/g;
          ' "$TARGET" || true

          # ---- 修改3：如果脚本中未包含 'Fix PPP / UPnP issues' 字样，则追加修复脚本片段 ----
          if ! grep -qF "Fix PPP / UPnP issues" "$TARGET"; then
            echo "追加 PPP / UPnP 修复脚本片段到 $TARGET"
            printf '%s\n' \
              "#######################################" \
              "# Fix PPP / UPnP issues" \
              "#######################################" \
              "mkdir -p package/base-files/files/etc/uci-defaults" \
              "cat << 'EOF' > package/base-files/files/etc/uci-defaults/99-custom-fixes" \
              "#!/bin/sh" \
              "# 修复拨号问题" \
              "sed -i '8c maxfail 1' /etc/ppp/options" \
              "sed -i '192c sleep 30' /lib/netifd/proto/ppp.sh" \
              "" \
              "# 修复 upnp 问题" \
              "sed -i '10c option external_ip \"59.111.160.244\"' /etc/config/upnpd" \
              "" \
              "exit 0" \
              "EOF" \
              "chmod +x package/base-files/files/etc/uci-defaults/99-custom-fixes" \
              >> "$TARGET"
          else
            echo "检测到已存在 PPP/UPnP 修复片段，跳过追加"
          fi

          echo "修改已完成，显示最后 40 行预览："
          tail -n 40 "$TARGET" || true

      - name: Verify modifications
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail
          TARGET="Scripts/diy.sh"
          verify_count=0
          total_count=4

          if grep -q '"zn_m2" "redmi_ax5" "qihoo_360v6"' "$TARGET"; then
            echo "✓ 修改1 验证通过"
            verify_count=$((verify_count+1))
          else
            echo "✗ 修改1 验证失败"
          fi

          if grep -q 'CONFIG_PACKAGE_git-http=y' "$TARGET"; then
            echo "✓ 修改2 验证通过"
            verify_count=$((verify_count+1))
          else
            echo "✗ 修改2 验证失败"
          fi

          if grep -q 'Fix PPP / UPnP issues' "$TARGET"; then
            echo "✓ 修改3 验证通过"
            verify_count=$((verify_count+1))
          else
            echo "✗ 修改3 验证失败"
          fi

          if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' "$TARGET"; then
            echo "✓ 修改4 验证通过"
            verify_count=$((verify_count+1))
          else
            echo "✗ 修改4 验证失败"
          fi

          echo "验证通过: ${verify_count}/${total_count}"

      - name: Commit and push changes
        if: steps.check_updates.outputs.has_updates == 'true'
        id: push_changes
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A

          if git diff --cached --quiet; then
            echo "ℹ️ 没有需要提交的更改"
            echo "pushed=false" >> $GITHUB_OUTPUT
          else
            git commit -m "chore: sync from upstream and apply modifications

- Synced from: https://github.com/ysuolmai/OpenWRT-CI
- Applied 4 custom modifications to Scripts/diy.sh
- Disabled workflows via API/rename: sync-config.yml, OWRT-ALL.yml

Automated by GitHub Actions"
            # 保持线性历史，先拉取 rebase
            if ! git pull origin main --rebase; then
              git rebase --abort || true
              git pull origin main --no-rebase || true
            fi
            git push origin main || true
            echo "pushed=true" >> $GITHUB_OUTPUT
          fi

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "================================"
          echo "📊 工作流执行摘要"
          echo "================================"
          if [ "${{ steps.check_updates.outputs.has_updates }}" = "true" ]; then
            echo "✅ 上游有更新，已尝试同步并应用修改"
            if [ "${{ steps.push_changes.outputs.pushed }}" = "true" ]; then
              echo "✅ 更改已推送到远程仓库"
            else
              echo "ℹ️ 更改未推送或没有需要推送的更改"
            fi
          else
            echo "ℹ️ 上游无更新，未做改动"
          fi
          echo ""
          echo "已使用 token: PAT_TOKEN (仓库 secret) 优先作为 API 调用凭证"
          echo "================================"
